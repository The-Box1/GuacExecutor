using System;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Guac
{
	public class ExploitAPI
	{
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool WaitNamedPipe(string name, int timeout);

		public static bool NamedPipeExist(string pipeName)
		{
			bool result;
			try
			{
				int timeout = 0;
				if (!ExploitAPI.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), timeout))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					if (lastWin32Error == 0)
					{
						return false;
					}
					if (lastWin32Error == 2)
					{
						return false;
					}
				}
				result = true;
			}
			catch (Exception)
			{
				result = false;
			}
			return result;
		}

		private void SMTP(string pipe, string input)
		{
			if (ExploitAPI.NamedPipeExist(pipe))
			{
				try
				{
					using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
					{
						namedPipeClientStream.Connect();
						using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream))
						{
							streamWriter.Write(input);
							streamWriter.Dispose();
						}
						namedPipeClientStream.Dispose();
					}
					return;
				}
				catch (IOException)
				{
					MessageBox.Show("Error occured sending message to the game!", "Connection Failed!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
					return;
				}
			}
			MessageBox.Show("Error occured. Did the dll properly inject?", "Oops", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		private string ReadURL(string url)
		{
			return this.client.DownloadString(url);
		}

		private string GetLatestData()
		{
			string text = this.ReadURL("https://cdn.wearedevs.net/software/exploitapi/latestdata.txt");
			if (text.Length > 0)
			{
				return text;
			}
			return "";
		}

		public bool IsUpdated()
		{
			bool result = false;
			string latestData = this.GetLatestData();
			if (latestData.Length > 0)
			{
				result = Convert.ToBoolean(latestData.Split(new char[]
				{
					' '
				})[0]);
			}
			else
			{
				MessageBox.Show("Could not check for the latest version. Did your fireall block us?", "Error");
			}
			return result;
		}

		private bool DownloadLatestVersion()
		{
			if (File.Exists("exploit-main.dll"))
			{
				File.Delete("exploit-main.dll");
			}
			string latestData = this.GetLatestData();
			if (latestData.Length > 0)
			{
				this.client.DownloadFile(latestData.Split(new char[]
				{
					' '
				})[1], "exploit-main.dll");
			}
			return File.Exists("exploit-main.dll");
		}

		public bool isAPIAttached()
		{
			return ExploitAPI.NamedPipeExist(this.cmdpipe);
		}

		public bool LaunchExploit()
		{
			if (ExploitAPI.NamedPipeExist(this.cmdpipe))
			{
				MessageBox.Show("Dll already injected", "No problems");
			}
			else if (this.IsUpdated())
			{
				if (this.DownloadLatestVersion())
				{
					if (this.injector.InjectDLL())
					{
						return true;
					}
					MessageBox.Show("DLL failed to inject", "Error");
				}
				else
				{
					MessageBox.Show("Could not download the latest version! Did your firewall block us?", "Error");
				}
			}
			else
			{
				MessageBox.Show("Exploit is currently patched... Please wait for the developers to fix it! Meanwhile, check wearedevs.net for updates/info.", "Error");
			}
			return false;
		}

		public void SendCommand(string Command)
		{
			this.SMTP(this.cmdpipe, Command);
		}

		public void SendLuaCScript(string Script)
		{
			foreach (string input in Script.Split("\r\n".ToCharArray()))
			{
				try
				{
					this.SMTP(this.luacpipe, input);
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
				}
			}
		}

		public void SendLuaScript(string Script)
		{
			this.SMTP(this.luapipe, Script);
		}

		public void LuaC_getglobal(string service)
		{
			this.SendLuaCScript("getglobal " + service);
		}

		public void LuaC_getfield(int index, string instance)
		{
			this.SendLuaCScript(string.Concat(new object[]
			{
				"getglobal ",
				index,
				" ",
				instance
			}));
		}

		public void LuaC_setfield(int index, string property)
		{
			this.SendLuaCScript(string.Concat(new object[]
			{
				"setfield ",
				index,
				" ",
				property
			}));
		}

		public void LuaC_pushvalue(int index)
		{
			this.SendLuaCScript("pushvalue " + index);
		}

		public void LuaC_pushstring(string text)
		{
			this.SendLuaCScript("pushstring " + text);
		}

		public void LuaC_pushnumber(int number)
		{
			this.SendLuaCScript("pushnumber " + number);
		}

		public void LuaC_pcall(int numberOfArguments, int numberOfResults, int ErrorFunction)
		{
			this.SendLuaCScript(string.Concat(new object[]
			{
				"pushnumber ",
				numberOfArguments,
				" ",
				numberOfResults,
				" ",
				ErrorFunction
			}));
		}

		public void LuaC_settop(int index)
		{
			this.SendLuaCScript("settop " + index);
		}

		public void LuaC_pushboolean(string value = "false")
		{
			this.SendLuaCScript("pushboolean " + value);
		}

		public void LuaC_gettop()
		{
			this.SendLuaCScript("gettop");
		}

		public void LuaC_pushnil()
		{
			this.SendLuaCScript("pushnil");
		}

		public void LuaC_next(int index)
		{
			this.SendLuaCScript("next");
		}

		public void LuaC_pop(int quantity)
		{
			this.SendLuaCScript("pop " + quantity);
		}

		private WebClient client = new WebClient();

		private ExploitAPI.BasicInject injector = new ExploitAPI.BasicInject();

		private string cmdpipe = "WeAreDevsPublicAPI_CMD";

		private string luacpipe = "WeAreDevsPublicAPI_LuaC";

		private string luapipe = "WeAreDevsPublicAPI_Lua";

		private class BasicInject
		{
			[DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
			internal static extern IntPtr LoadLibraryA(string lpFileName);

			[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
			internal static extern UIntPtr GetProcAddress(IntPtr hModule, string procName);

			[DllImport("kernel32.dll", SetLastError = true)]
			[return: MarshalAs(UnmanagedType.Bool)]
			internal static extern bool FreeLibrary(IntPtr hModule);

			[DllImport("kernel32.dll")]
			internal static extern IntPtr OpenProcess(ExploitAPI.BasicInject.ProcessAccess dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);

			[DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
			internal static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

			[DllImport("kernel32.dll")]
			internal static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, UIntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out int lpNumberOfBytesRead);

			public bool InjectDLL()
			{
				if (Process.GetProcessesByName("RobloxPlayerBeta").Length == 0)
				{
					return false;
				}
				Process process = Process.GetProcessesByName("RobloxPlayerBeta")[0];
				byte[] bytes = new ASCIIEncoding().GetBytes(AppDomain.CurrentDomain.BaseDirectory + "exploit-main.dll");
				IntPtr hModule = ExploitAPI.BasicInject.LoadLibraryA("kernel32.dll");
				UIntPtr procAddress = ExploitAPI.BasicInject.GetProcAddress(hModule, "LoadLibraryA");
				ExploitAPI.BasicInject.FreeLibrary(hModule);
				if (procAddress == UIntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr = ExploitAPI.BasicInject.OpenProcess(ExploitAPI.BasicInject.ProcessAccess.AllAccess, false, process.Id);
				if (intPtr == IntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr2 = ExploitAPI.BasicInject.VirtualAllocEx(intPtr, (IntPtr)0, (uint)bytes.Length, 12288u, 4u);
				UIntPtr uintPtr;
				IntPtr intPtr3;
				return !(intPtr2 == IntPtr.Zero) && ExploitAPI.BasicInject.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, out uintPtr) && !(ExploitAPI.BasicInject.CreateRemoteThread(intPtr, (IntPtr)0, 0u, procAddress, intPtr2, 0u, out intPtr3) == IntPtr.Zero);
			}

			[Flags]
			public enum ProcessAccess
			{
				AllAccess = 1050235,
				CreateThread = 2,
				DuplicateHandle = 64,
				QueryInformation = 1024,
				SetInformation = 512,
				Terminate = 1,
				VMOperation = 8,
				VMRead = 16,
				VMWrite = 32,
				Synchronize = 1048576
			}
		}
	}
}
